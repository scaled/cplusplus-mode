name: C++
scopeName: source.c++
repository:
 angle_brackets:
  multi:
   name: meta.angle-brackets.c++
   begin: <
   end: >
   patterns:
    include: #angle_brackets
    include: $base
 block:
  multi:
   name: meta.block.c++
   begin: \{
   bcaps: 0=punctuation.section.block.begin.c
   end: \}
   ecaps: 0=punctuation.section.block.end.c
   patterns:
    single:
     name: meta.function-call.c
     pattern: (?x)\
    				(\
    					(?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)(?: \b[A-Za-z_][A-Za-z0-9_]*+\b | :: )*+                  # actual name\
    				)\
    				 \s*(\()
     caps: 1=support.function.any-method.c 2=punctuation.definition.parameters.c
    include: $base
 constructor:
  multi:
   name: meta.function.constructor.c++
   begin: (?x)\
    				(?:  ^\s*)                             # begin-of-line\
    				((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\
    				 \s*(\()                            # start bracket or end-of-line\
    			
   bcaps: 1=entity.name.function.c++ 2=punctuation.definition.parameters.begin.c
   end: \)
   ecaps: 0=punctuation.definition.parameters.end.c
   patterns:
    include: $base
  multi:
   name: meta.function.constructor.initializer-list.c++
   begin: (?x)\
    				(:)                            # begin-of-line\
    				((?=\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\
    				 \s*(\()))                      # start bracket or end-of-line\
    			
   bcaps: 1=punctuation.definition.parameters.c
   end: (?=\{)
   patterns:
    include: $base
 special_block:
  multi:
   name: meta.namespace-block${2:+.$2}.c++
   begin: \b(namespace)\b\s*([_A-Za-z][_A-Za-z0-9]*\b)?+
   bcaps: 1=storage.type.c++ 2=entity.name.type.c++
   end: (?<=\})|(?=(;|,|\(|\)|>|\[|\]|=))
   ecaps: 1=keyword.control.namespace.$2
   patterns:
    multi:
     begin: \{
     bcaps: 0=punctuation.definition.scope.c++
     end: \}
     ecaps: 0=punctuation.definition.scope.c++
     patterns:
      include: #special_block
      include: #constructor
      include: $base
    include: $base
  multi:
   name: meta.class-struct-block.c++
   begin: \b(class|struct)\b\s*([_A-Za-z][_A-Za-z0-9]*\b)?+(\s*:\s*(public|protected|private)\s*([_A-Za-z][_A-Za-z0-9]*\b)((\s*,\s*(public|protected|private)\s*[_A-Za-z][_A-Za-z0-9]*\b)*))?
   bcaps: 1=storage.type.c++ 2=entity.name.type.c++ 4=storage.type.modifier.c++ 5=entity.name.type.inherited.c++
   end: (?<=\})|(?=(;|\(|\)|>|\[|\]|=))
   patterns:
    include: #angle_brackets
    multi:
     begin: \{
     bcaps: 0=punctuation.section.block.begin.c++
     end: (\})(\s*\n)?
     ecaps: 1=punctuation.definition.invalid.c++ 2=invalid.illegal.you-forgot-semicolon.c++
     patterns:
      include: #special_block
      include: #constructor
      include: $base
    include: $base
  multi:
   name: meta.extern-block.c++
   begin: \b(extern)(?=\s*")
   bcaps: 1=storage.modifier.c++
   end: (?<=\})|(?=\w)
   patterns:
    multi:
     begin: \{
     bcaps: 0=punctuation.section.block.begin.c
     end: \}
     ecaps: 0=punctuation.section.block.end.c
     patterns:
      include: #special_block
      include: $base
    include: $base
 strings:
  multi:
   name: string.quoted.double.c++
   begin: (u|u8|U|L)?"
   bcaps: 0=punctuation.definition.string.begin.c++ 1=meta.encoding.c++
   end: "
   ecaps: 0=punctuation.definition.string.end.c++
   patterns:
    single:
     name: constant.character.escape.c++
     pattern: \\u\h{4}|\\U\h{8}
    single:
     name: constant.character.escape.c++
     pattern: \\['"?\\abfnrtv]
    single:
     name: constant.character.escape.c++
     pattern: \\[0-7]{1,3}
    single:
     name: constant.character.escape.c++
     pattern: \\x\h+
  multi:
   name: string.quoted.double.raw.c++
   begin: (u|u8|U|L)?R"(?:([^ ()\\\t]{0,16})|([^ ()\\\t]*))\(
   bcaps: 0=punctuation.definition.string.begin.c++ 1=meta.encoding.c++ 3=invalid.illegal.delimiter-too-long.c++
   end: \)\2(\3)"
   ecaps: 0=punctuation.definition.string.end.c++ 1=invalid.illegal.delimiter-too-long.c++
patterns:
 include: #special_block
 include: #strings
 include: source.c
 single:
  name: storage.modifier.$1.c++
  pattern: \b(friend|explicit|virtual)\b
 single:
  name: storage.modifier.$1.c++
  pattern: \b(private|protected|public):
 single:
  name: keyword.control.c++
  pattern: \b(catch|operator|try|throw|using)\b
 single:
  name: keyword.control.c++
  pattern: \bdelete\b(\s*\[\])?|\bnew\b(?!])
 single:
  name: variable.other.readwrite.member.c++
  pattern: \b(f|m)[A-Z]\w*\b
 single:
  name: variable.language.c++
  pattern: \b(this|nullptr)\b
 single:
  name: storage.type.template.c++
  pattern: \btemplate\b\s*
 single:
  name: keyword.operator.cast.c++
  pattern: \b(const_cast|dynamic_cast|reinterpret_cast|static_cast)\b\s*
 single:
  name: keyword.operator.c++
  pattern: \b(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq)\b
 single:
  name: storage.type.c++
  pattern: \b(class|wchar_t)\b
 single:
  name: storage.modifier.c++
  pattern: \b(constexpr|export|mutable|typename|thread_local)\b
 multi:
  name: meta.function.destructor.c++
  begin: (?x)\
    				(?:  ^                                 # begin-of-line\
    				  |  (?: (?<!else|new|=) )             #  or word + space before name\
    				)\
    				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\
    				 \s*(\()                           # start bracket or end-of-line\
    			
  bcaps: 1=entity.name.function.c++ 2=punctuation.definition.parameters.begin.c
  end: \)
  ecaps: 0=punctuation.definition.parameters.end.c
  patterns:
   include: $base
 multi:
  name: meta.function.destructor.prototype.c++
  begin: (?x)\
    				(?:  ^                                 # begin-of-line\
    				  |  (?: (?<!else|new|=) )             #  or word + space before name\
    				)\
    				((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\
    				 \s*(\()                           # terminating semi-colon\
    			
  bcaps: 1=entity.name.function.c++ 2=punctuation.definition.parameters.begin.c
  end: \)
  ecaps: 0=punctuation.definition.parameters.end.c
  patterns:
   include: $base
